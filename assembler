#!/usr/bin/env python3
#
# Copyright 2020 Christian Seberino
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import macros
import sys

FUNCS      = ["add", "sub", "mult", "div", "and", "or", "zjump", "gjump",
                                                "copy", "load", "store", "stop"]
CONST_SIZE = 3
NIBB_SIZE  = 0.5
WORD_SIZE  = 4
HEX        = 16

def hex_(e, n_bytes):
        e = int(e, HEX) if str(e).startswith("0x") else e

        return hex(int(e))[2:].zfill(int(2 * n_bytes))

def machine_code_word(word, labels):
        word = word.split()[1:] if ":" in word else word.split()
        if word[0] in FUNCS:
                func = hex_(FUNCS.index(word[0]), NIBB_SIZE)
                if word[0] == "copy":
                        const = word[1]
                        const = labels[const] if const in labels else const
                        const = hex_(const,       CONST_SIZE)
                        reg   = hex_(word[2][1:], NIBB_SIZE)
                        word  = func + const + reg
                else:
                        regs  = [hex_(r[1:], NIBB_SIZE) for r in word[1:]]
                        pad   = (2 * WORD_SIZE - 1 - len(regs)) * "0"
                        word  = func + "".join(regs) + pad
        else:
                const = labels[word[0]] if word[0] in labels else word[0]
                const = hex_(const, WORD_SIZE)
                word  = const

        return word

def assembler(assembly):
        words        = [e.strip() for e in macros.replace(assembly).split("\n")]
        words        = [e for e in words if e and not e.startswith("#")]
        labels       = {e : WORD_SIZE * i for i, e in enumerate(words)}
        labels       = {e[:e.find(":")] : labels[e] for e in labels if ":" in e}
        machine_code = "".join([machine_code_word(e, labels) for e in words])

        return machine_code

with open(sys.argv[1]) as f:
        print(assembler(f.read()))
